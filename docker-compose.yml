version: "3.9"
services:
  postgres:
    image: postgres:16
    container_name: nl2sql_postgres
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app_pw
      POSTGRES_DB: appdb
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    # Needed so other services wait untill Postgres is
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d appdb"]
      interval: 5s
      timeout: 3s
      retries: 30
    networks: [nl2sql_net]

  python-llm:
    build:
      context: ./services/python-llm
      dockerfile: Dockerfile
    container_name: nl2sql_python_llm
    environment:
      # select mock for offline testing
      LLM_BACKEND: ${LLM_BACKEND:-mock}
      OLLAMA_URL: ${OLLAMA_URL:-http://ollama:11434}
      OPENAI_BASE_URL: ${OPENAI_BASE_URL:-https://api.openai.com/v1}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-unset}
    depends_on:
      - postgres
    ports:
      - "8000:8000"
    networks: [nl2sql_net]

  backend:
    build:
      context: ./backend-java
      dockerfile: Dockerfile
    container_name: nl2sql_backend
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_URL: jdbc:postgresql://postgres:5432/appdb
      DB_USERNAME: app
      DB_PASSWORD: app_pw
      PY_SERVICE_BASEURL: http://python-llm:8000
    depends_on:
      - postgres
      - python-llm
    ports:
      - "8080:8080"
    networks: [nl2sql_net]

  # Optional: local Ollama for offline LLM hosting. Preload models into the volume before going offline.
  ollama:
    image: ollama/ollama:latest
    container_name: nl2sql_ollama
    restart: unless-stopped
    volumes:
      - ollama:/root/.ollama
    ports:
      - "11434:11434"
    networks: [nl2sql_net]

volumes:
  pgdata:
  ollama:

networks:
  nl2sql_net:
    driver: bridge
